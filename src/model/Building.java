package model;

public class Building {
	
	/**Building name*/
	private String name;
	
	/**Flavor text/useful information*/
	private String description;
	
	/**Current monetary cost of the building*/
	private int cost;
	
	/**Current population cost of the building*/
	private int popcost;
	
	/**Base gold income of the building*/
	private int gIncome;
	
	/**Base population income of the building*/
	private int pIncome;
	
	/**How much the building cost increases per building in the town*/
	private double costMultiplier;
	
	/**The path to where the image will be*/
	private String imagePath;
	
	/**
	 * The type identifier for this building
	 * 1: Low-Income Housing
	 * 2: Med-Income Housing
	 * 3: High-Income Housing
	 * 4: Low-Income Industry
	 * 5: Med-Income Industry
	 * 6: High-Income Industry
	 * 
	 * TODO: 
	 * 7: Unique Buildings
	 * 8: National Wonders
	 * 9: World Wonders
	 */
	private int type;
	
	/**The number of this type of building in town*/
	private int count;
	
	/**To what degree this building affects the gold income of the other types  of buildings*/
	private double[] mBonusFactor;
	
	/**To what degree this building affects the growth of the other types of buildings*/
	private double[] pBonusFactor;
	
	/**The current bonus this building is providing to the other buildings in the city*/
	private double[] currentMBonus;
	
	/**The current growth bonus this building is providing*/
	private double[] currentPBonus;
	
	public Building(String nName, String nDesc, int nCost, int pCost, int ngIncome,
			int npIncome, int nType, double[] nMBonusFactor, double[] npBonusFactor) {
		
		name = nName;
		description = nDesc;
		cost = nCost;
		popcost = pCost;
		gIncome = ngIncome;
		pIncome = npIncome;
		mBonusFactor = nMBonusFactor;
		pBonusFactor = npBonusFactor;
		currentMBonus = new double[] {0,0,0,0,0,0};
		currentPBonus = new double[] {0,0,0,0,0,0};
		for(int i = 0; i < currentPBonus.length;i++) {
			currentPBonus[i] = currentPBonus[i]+pBonusFactor[i];
			currentMBonus[i] = currentMBonus[i]+mBonusFactor[i];
		}
		
		type = nType;
		costMultiplier = 1.01;
		count = 0;
	}
	
	/**
	 * Method to buy a certain quantity of buildings
	 * @param quantity The number of buildings to be bought
	 * @param money The amount of money currently available
	 * @param people The number of people currently unemployed
	 */
	public void buyBuilding(int quantity, int money, int people) {
		for(int i = 0; i < quantity;i++) {
			if(money - cost >= 0 && people - popcost >= 0) {
				count++;
				money = money-cost;
				people = people-popcost;
				cost = (int)Math.ceil(cost*costMultiplier);
				updateBonus(true);
				
			}
		}
	}
	
	/**
	 * Method to update the bonus provided by this building. True for when the building is being bought
	 * false otherwise
	 * @param buying Whether or not the building has just been bought
	 */
	private void updateBonus(boolean buying) {
		if(buying)
			for(int i = 0; i < pBonusFactor.length;i++) {
				currentPBonus[i] = currentPBonus[i]+pBonusFactor[i];
				currentMBonus[i] = currentMBonus[i]+mBonusFactor[i];
			}
		else
			for(int i = 0; i < pBonusFactor.length;i++) {
				currentPBonus[i] = currentPBonus[i]-pBonusFactor[i];
				currentMBonus[i] = currentMBonus[i]-mBonusFactor[i];
			}
	}
	
	/**
	 * Method to buy the maximum amount of a given building given the current quantity of resources
	 * @param money The amount of money currently available
	 * @param people The number of people currently unemployed
	 */
	public void buyMax(int money, int people) {
		while(money-cost >= 0 && people -popcost >= 0) {
			count++;
			money = money - cost;
			people = people - popcost;
			cost = (int)Math.ceil(costMultiplier*cost);
			updateBonus(true);
		}
	}
	
	/**
	 * Method to get the gold income of this building type
	 * @return The amount of money generated by this building unadjusted for bonuses
	 */
	public int getGIncome() {
		return gIncome*count;
	}
	
	public int getPIncome() {
		return pIncome*count;
	}
	
	/**
	 * Method to get the name of the building
	 * @return the name of the building
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * Method which returns the type of the building for the purpose of calculating bonuses
	 * @return The building's type
	 */
	public int getType() {
		return type;
	}
	

	/**
	 * Method which returns the description/flavor text of the building
	 * @return The flavor text
	 */
	public String getDescription() {
		return description;
	}
	
	/**
	 * Method which returns the pointer to this building's current growth bonus factor
	 * @return The bonus factor this building is providing for growth
	 */
	public double[] getPBonus() {
		return currentPBonus;
	}
	
	/**
	 * Method which returns the pointer to this building's current money bonus factors
	 * @return The bonus factor this building is providing for money
	 */
	public double[] getMBonus() {
		return currentMBonus;
	}
	
	public int getGCost() {
		return cost;
	}
	
	public int getPCost() {
		return popcost;
	}
	
	
}
