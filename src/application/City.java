package application;

import java.util.ArrayList;

public class City {
	
	/**How much the city is growing a day*/
	private int growth;
	
	/**The amount of money the city is generating a day*/
	private int income;
	
	/**The bonuses each type of building is receiving to their income*/
	private double[] mTotalBonuses;
	
	/**The total bonuses to population growth this city is receiving*/
	private double[] pTotalBonuses;
	
	/**The list of building objects*/
	private Building[] buildings;
	
	/**The population of the city. Used for demographics and the like*/
	private long population;
	
	/**The amount of money generated by this city throughout it's lifetime*/
	private long wealth;
	
	
	public City(int popStart, int moneyStart, int cityID) {
		population = popStart;
		wealth = moneyStart;
		growth = 0;
		income = 0;
		buildings = new Building[6];
		if(cityID == 0) {
			//Shack
			String name = "Favella";
			String desc = "Place where poor laborers live and lacks all kinds of comforts.";
			int gCost = 5;
			int popCost = 0;
			int gInc = 0;
			int pInc = 5;
			int type = 1;
			double[] mBonuses = new double[] {0,0,0,.05,0,0};
			double[] pBonuses = new double[] {.01,0,0,0,0,0};
			
			
			buildings[0] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);
			
			normalizeArray(mBonuses,0);
			normalizeArray(pBonuses,0);
			
			//Cottages
			name = "Cottage";
			desc = "Place where skilled laborers live. Nice and cozy. These people can actua"
					+ "lly pay taxes.";
			gCost = 10;
			popCost = 0;
			gInc = 1;
			pInc = 3;
			type = 2;
			
			//mBonuses = new double[] {0,0,0,0,.1,0};
			//pBonuses = new double[] {0,0,0,0,0,0};
			mBonuses[4] = .1;
			pBonuses[1] = .05;
			buildings[1] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);
			
			normalizeArray(mBonuses,0);
			normalizeArray(pBonuses,0);
			
			//Estate
			name = "Estate";
			desc = "Place where wealthy merchants and nobles live. They pay tribute"
					+ " directly to the Royal Family.";
			gCost = 50;
			popCost = 2;
			gInc = 10;
			pInc = 1;
			type = 3;
			//mBonuses = new double[] {0,0,0,0,.05,.05};
			
			mBonuses[4] = .05;
			mBonuses[5] = .05;
			buildings[2] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);
			
			normalizeArray(mBonuses,0);
			normalizeArray(pBonuses,0);
			
			
			//Fishing boat
			name = "Fishing Boat";
			desc = "A state owned vessel which employees fishermen to go out and catch fish";
			gCost = 10;
			popCost = 5;
			gInc = 8;
			pInc = 0;
			type = 4;
			
			pBonuses[0] = .05;
			pBonuses[1] = .05;
			
			buildings[3] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);
			
			normalizeArray(pBonuses,0);
			
			//Artisan Shops
			name = "Artisan Shops";
			desc = "These shops are owned by artisans who sell their crafts.";
			gCost = 20;
			popCost = 3;
			gInc = 13;
			pInc = 0;
			type = 5;
			
			pBonuses[2] = .05;
			buildings[4] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);
			
			normalizeArray(pBonuses,0);
			
			//Chartered Companies
			name = "Chartered Companies";
			desc = "A chartered company is one which possesses a Royal charter, giving"
					+ " the company the right to act with the authority of the Royal family.";
			gCost = 250;
			popCost = 150;
			gInc = 200;
			pInc = 0;
			type = 6;
			
			pBonuses[2]=.05;
			pBonuses[1]=.05;
			buildings[5] = new Building(name, desc, gCost, popCost, gInc, pInc, type,mBonuses,pBonuses);

		}
		
		
		
		//Method which establishes that which makes cities unique
		//instantiateUniqueProperties(cityID);
		
	}
	
	/**
	 * Method which sets all the entries in an a array to the given normalization value
	 * @param array The array to reset
	 * @param normalizationValue The value to set the array to
	 */
	private void normalizeArray(double[] array, double normalizationValue) {
		for(int i = 0; i < array.length;i++)
			array[i] = normalizationValue;
	}
	
	
	/**
	 * Method to update the current city bonuses
	 */
	public void updateBonuses() {
		normalizeArray(pTotalBonuses,1);
		normalizeArray(mTotalBonuses,1);
		for(int building = 0; building < buildings.length; building++) {
			for(int bonus = 0; bonus<mTotalBonuses.length;bonus++) {
				pTotalBonuses[bonus] += buildings[building].getPBonus()[bonus];
				mTotalBonuses[bonus] += buildings[building].getMBonus()[bonus];
			}
		}
	}
		
	/**
	 * Method which updates this city's daily income
	 */
	public void updateIncome(double incomeModifier) {
		income = 0;
		for(int i = 0; i < buildings.length;i++) {
			income += buildings[i].getGIncome()*mTotalBonuses[i];
		}
		income *= incomeModifier;
	}
	
	/**
	 * Method which updates this city's daily growth value
	 */
	public void updatePopGrowth(double growthModifier) {
		growth = 0;
		for(int i = 0; i < buildings.length;i++) {
			growth += buildings[i].getPIncome()*pTotalBonuses[i];
		}
		growth *= growthModifier;
	}
	
	/**
	 * Method to get this city's income
	 * @return This city's income
	 */
	public int getIncome() {
		return income;
	}

	/**
	 * Method to get this city's growth
	 * @return This city's growth
	 */
	public int getGrowth() {
		return growth;
	}
	
	public ArrayList<double[]> getBonuses() {
		updateBonuses();
		ArrayList<double[]> temp = new ArrayList<double[]>();
		temp.add(mTotalBonuses);
		temp.add(pTotalBonuses);
		return temp;
	}
	
	public long getPopulation() {
		return population;
	}
	
	public long getWealth() {
		return wealth;
	}
	
	public void cityNextDay() {
		//Update city's population
		population += growth;
		
		//Update city's wealth
		wealth+= income;
	}
	
	public Building[] getBuildingsList() {
		return buildings;
	}


}
